import os
from faster_whisper import WhisperModel
import ffmpeg
from pathlib import Path
from typing import List, Dict, Tuple, Optional
import logging
import asyncio
import json
import math
import subprocess
import tempfile
import re
from tqdm import tqdm
import threading
import time

logger = logging.getLogger(__name__)

class FastVideoProcessor:
    def __init__(self, temp_dir: Path):
        self.temp_dir = temp_dir
        self.temp_dir.mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Faster-Whisper
        try:
            # –î–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ AMD int8 - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞.
            self.whisper_model = WhisperModel("base", device="cpu", compute_type="int8")
            logger.info("–ú–æ–¥–µ–ª—å Faster-Whisper 'base' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (CPU, int8)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Faster-Whisper: {e}")
            self.whisper_model = None
    
    async def process_video(self, video_path: str, chat_id: int) -> List[str]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —á–∞—Ç–∞
            chat_dir = self.temp_dir / str(chat_id)
            chat_dir.mkdir(exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            video_info = await self.get_video_info(video_path)
            duration = video_info.get('duration', 0)
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {duration} —Å–µ–∫—É–Ω–¥")
            
            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ 5 –º–∏–Ω—É—Ç, –Ω–∞—Ä–µ–∑–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
            if duration > 300:  # 5 –º–∏–Ω—É—Ç
                chunks = await self.split_video_into_chunks(video_path, chat_dir)
            else:
                chunks = [video_path]
            
            processed_videos = []
            
            for i, chunk_path in enumerate(chunks):
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ {i+1}/{len(chunks)}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
                subtitles = await self.generate_subtitles(chunk_path)
                
                # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ —á–µ—Ä–µ–∑ FFmpeg
                vertical_video = await self.create_vertical_video_fast(
                    chunk_path, subtitles, chat_dir, i
                )
                
                if vertical_video:
                    processed_videos.append(vertical_video)
            
            return processed_videos
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return []
    
    async def get_video_info(self, video_path: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
        try:
            def get_info():
                probe = ffmpeg.probe(video_path)
                video_stream = next((stream for stream in probe['streams'] 
                                   if stream['codec_type'] == 'video'), None)
                return {
                    'duration': float(probe['format']['duration']),
                    'width': int(video_stream['width']),
                    'height': int(video_stream['height']),
                    'fps': eval(video_stream['r_frame_rate'])
                }
            
            loop = asyncio.get_event_loop()
            return await loop.run_in_executor(None, get_info)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
            return {'duration': 0, 'width': 1920, 'height': 1080, 'fps': 30}
    
    async def split_video_into_chunks(self, video_path: str, output_dir: Path) -> List[str]:
        """–ù–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 5 –º–∏–Ω—É—Ç"""
        try:
            chunk_duration = 300  # 5 –º–∏–Ω—É—Ç
            video_info = await self.get_video_info(video_path)
            total_duration = video_info['duration']
            
            chunks = []
            chunk_count = math.ceil(total_duration / chunk_duration)
            
            def split_chunk(i):
                start_time = i * chunk_duration
                output_path = output_dir / f"chunk_{i:03d}.mp4"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Ä–µ–∑–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                (
                    ffmpeg
                    .input(video_path, ss=start_time, t=chunk_duration)
                    .output(str(output_path), c='copy', avoid_negative_ts='make_zero')
                    .overwrite_output()
                    .run(quiet=True)
                )
                
                return str(output_path)
            
            # –ù–∞—Ä–µ–∑–∞–µ–º —á–∞–Ω–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            logger.info(f"‚úÇÔ∏è –ù–∞—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ {chunk_count} —á–∞–Ω–∫–æ–≤...")
            loop = asyncio.get_event_loop()
            tasks = []
            
            with tqdm(total=chunk_count, desc="‚úÇÔ∏è –ù–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ", unit="—á–∞–Ω–∫") as pbar:
                for i in range(chunk_count):
                    task = loop.run_in_executor(None, split_chunk, i)
                    tasks.append(task)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                chunks = []
                for task in asyncio.as_completed(tasks):
                    chunk = await task
                    chunks.append(chunk)
                    pbar.update(1)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞–Ω–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
            chunks.sort()
            
            logger.info(f"–í–∏–¥–µ–æ –Ω–∞—Ä–µ–∑–∞–Ω–æ –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤")
            return chunks
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return [video_path]
    
    async def generate_subtitles(self, video_path: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ Faster-Whisper"""
        try:
            if not self.whisper_model:
                logger.error("–ú–æ–¥–µ–ª—å Faster-Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return []
            
            def transcribe():
                logger.info("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —á–µ—Ä–µ–∑ Faster-Whisper AI...")
                
                # faster-whisper –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å –ø—É—Ç–µ–º –∫ –≤–∏–¥–µ–æ
                segments, info = self.whisper_model.transcribe(
                    video_path,
                    word_timestamps=True,
                    language='ru',
                    beam_size=5
                )

                subtitles = []
                # tqdm –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
                total_segments = info.duration
                with tqdm(total=total_segments, desc="üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—á–∏", unit="—Å–µ–∫") as pbar:
                    for segment in segments:
                        if segment.words:
                            for word in segment.words:
                                subtitles.append({
                                    'start': word.start,
                                    'end': word.end,
                                    'text': word.word.strip(),
                                    'confidence': word.probability
                                })
                        pbar.update(segment.end - segment.start)

                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —è–∑—ã–∫: {info.language} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {info.language_probability:.2f})")
                return subtitles
            
            loop = asyncio.get_event_loop()
            subtitles = await loop.run_in_executor(None, transcribe)
            
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(subtitles)} —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
            return subtitles
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return []
    
    async def create_vertical_video_fast(
        self, 
        video_path: str, 
        subtitles: List[Dict], 
        output_dir: Path, 
        chunk_index: int
    ) -> Optional[str]:
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ FFmpeg"""
        try:
            output_path = output_dir / f"vertical_{chunk_index:03d}.mp4"
            
            def create_vertical():
                logger.info("–°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ FFmpeg...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                probe = ffmpeg.probe(video_path)
                video_stream = next(s for s in probe['streams'] if s['codec_type'] == 'video')
                width = int(video_stream['width'])
                height = int(video_stream['height'])
                
                # –¶–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã 9:16
                target_width = 1080
                target_height = 1920
                
                # SRT —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ drawtext —Ñ–∏–ª—å—Ç—Ä—ã
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–∑–∞–Ω–∏–º–∞–µ—Ç 70% –≤—ã—Å–æ—Ç—ã)
                main_height = int(target_height * 0.7)
                # –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                original_ratio = width / height
                main_width = int(main_height * original_ratio)
                
                # –ü–æ–∑–∏—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                x_offset = (target_width - main_width) // 2
                y_offset = int(target_height * 0.15)  # 15% –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É (–±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤)
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
                input_video = ffmpeg.input(video_path)
                
                # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω (—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∏ —Ä–∞–∑–º—ã–≤–∞–µ–º)
                background = (
                    input_video
                    .filter('scale', target_width, target_height)
                    .filter('gblur', sigma=20)
                )
                
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞
                # –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º –≤–∏–¥–µ–æ —à–∏—Ä–∏–Ω–æ–π –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                scale_width = target_width
                scale_height = int(target_width * height / width)
                
                if scale_height > main_height:
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
                    main_video = (
                        input_video
                        .filter('scale', scale_width, scale_height)
                        .filter('crop', target_width, main_height, 0, (scale_height - main_height) // 2)
                    )
                else:
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –≤—ã—Å–æ—Ç—ã –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
                    main_video = (
                        input_video
                        .filter('scale', target_width, main_height)
                    )
                
                x_offset = 0  # –í–∏–¥–µ–æ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É
                
                # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —Ñ–æ–Ω
                composed = ffmpeg.overlay(background, main_video, x=x_offset, y=y_offset)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
                audio = input_video.audio
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä —Å —Ö—Ä–æ–º–∞–∫–µ–µ–º
                banner_path = Path("banner1.mp4")
                if banner_path.exists():
                    logger.info("–î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä —Å —Ö—Ä–æ–º–∞–∫–µ–µ–º...")
                    composed = self.add_banner_with_chromakey(composed, str(banner_path), target_width, target_height)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –≤–º–µ—Å—Ç–æ SRT
                if subtitles:
                    logger.info("–î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã...")
                    composed = self.add_animated_subtitles(composed, subtitles, target_width, target_height)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                duration = float(probe['format']['duration'])
                
                # –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É FFmpeg —Å –∞—É–¥–∏–æ
                output_args = ffmpeg.output(
                    composed, audio,  # –î–æ–±–∞–≤–ª—è–µ–º –∏ –≤–∏–¥–µ–æ, –∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
                    str(output_path),
                    vcodec='libx264',
                    acodec='aac',
                    preset='fast',
                    crf=23,
                    pix_fmt='yuv420p',
                    movflags='faststart'
                ).overwrite_output()
                
                # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                cmd_args = ffmpeg.compile(output_args)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ...")
                success = self.run_ffmpeg_with_progress(
                    cmd_args, 
                    duration, 
                    f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ {chunk_index+1}"
                )
                
                # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                if not success:
                    logger.warning("–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∑–∞–ø—É—Å–∫–∞–µ–º FFmpeg –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º...")
                    try:
                        output_args.run(quiet=True, overwrite_output=True)
                        success = True
                        logger.info("FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞)")
                    except ffmpeg.Error as e:
                        logger.error(f"FFmpeg –æ—à–∏–±–∫–∞: {e.stderr.decode('utf-8', errors='ignore')}")
                        return None
                
                if not success:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –≤–∏–¥–µ–æ")
                    return None
                
                # SRT —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
                
                logger.info("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return str(output_path)
            
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(None, create_vertical)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {result}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
            return None
    
    def create_srt_file(self, subtitles: List[Dict], srt_path: Path):
        """–°–æ–∑–¥–∞–Ω–∏–µ SRT —Ñ–∞–π–ª–∞ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"""
        try:
            with open(srt_path, 'w', encoding='utf-8') as f:
                for i, subtitle in enumerate(subtitles, 1):
                    start_time = self.seconds_to_srt_time(subtitle['start'])
                    end_time = self.seconds_to_srt_time(subtitle['end'])
                    
                    f.write(f"{i}\n")
                    f.write(f"{start_time} --> {end_time}\n")
                    f.write(f"{subtitle['text']}\n\n")
            
            logger.info(f"SRT —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {srt_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SRT —Ñ–∞–π–ª–∞: {e}")
    
    def seconds_to_srt_time(self, seconds: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ–∫—É–Ω–¥ –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ SRT"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        millisecs = int((seconds % 1) * 1000)
        
        return f"{hours:02d}:{minutes:02d}:{secs:02d},{millisecs:03d}"
    
    def cleanup_temp_files(self, chat_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            chat_dir = self.temp_dir / str(chat_id)
            if chat_dir.exists():
                import shutil
                shutil.rmtree(chat_dir)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —á–∞—Ç–∞ {chat_id} —É–¥–∞–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def run_ffmpeg_with_progress(self, cmd_args: List[str], duration: float, description: str = "Processing"):
        """–ó–∞–ø—É—Å–∫ FFmpeg —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å FFmpeg —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è Windows
            process = subprocess.Popen(
                cmd_args,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True,
                bufsize=1,
                encoding='utf-8',
                errors='ignore'  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            pbar = tqdm(
                total=100,
                desc=description,
                unit='%',
                bar_format='{l_bar}{bar}| {n:.1f}% [{elapsed}<{remaining}]'
            )
            
            stderr_lines = []
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ FFmpeg
            while True:
                try:
                    output = process.stderr.readline()
                    if output == '' and process.poll() is not None:
                        break
                    
                    if output:
                        stderr_lines.append(output.strip())
                        
                        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        time_match = re.search(r'time=(\d+):(\d+):(\d+\.\d+)', output)
                        if time_match:
                            hours = int(time_match.group(1))
                            minutes = int(time_match.group(2))
                            seconds = float(time_match.group(3))
                            
                            current_time = hours * 3600 + minutes * 60 + seconds
                            progress = min((current_time / duration) * 100, 100)
                            
                            pbar.n = progress
                            pbar.refresh()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
                        if process.poll() is not None:
                            break
                            
                except UnicodeDecodeError:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                    continue
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ FFmpeg: {e}")
                    break
            
            pbar.close()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                return_code = process.wait(timeout=30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
            except subprocess.TimeoutExpired:
                logger.warning("FFmpeg –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                process.terminate()
                try:
                    return_code = process.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    logger.error("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ FFmpeg...")
                    process.kill()
                    return_code = process.wait()
            
            if return_code != 0:
                logger.error(f"FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {return_code}")
                # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ stderr –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if stderr_lines:
                    logger.error("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ FFmpeg:")
                    for line in stderr_lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                        logger.error(f"  {line}")
                return False
            
            logger.info("FFmpeg —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FFmpeg —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: {e}")
            return False
    
    def add_animated_subtitles(self, video_stream, subtitles: List[Dict], width: int, height: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –∫ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫—É"""
        try:
            if not subtitles:
                return video_stream
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å—É–±—Ç–∏—Ç—Ä –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π drawtext —Ñ–∏–ª—å—Ç—Ä
            current_stream = video_stream
            
            for subtitle in subtitles:
                start_time = subtitle['start']
                end_time = subtitle['end']
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                text = subtitle['text'].replace("'", "").replace('"', '').replace('\\', '').strip()
                
                if not text:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã
                    continue
                
                # –ü–æ–∑–∏—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –Ω–∞ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ)
                y_pos = int(height * 0.78)  # 78% –æ—Ç –≤–µ—Ä—Ö–∞
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π drawtext —Ñ–∏–ª—å—Ç—Ä
                current_stream = current_stream.filter(
                    'drawtext',
                    text=text,
                    fontfile='Robloxian-UltraBold.ttf',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç –∏–∑ –ø–∞–ø–∫–∏
                    fontsize=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
                    fontcolor='white',
                    bordercolor='black',
                    borderw=8,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —á–µ—Ä–Ω–∞—è —Ä–∞–º–∫–∞
                    x='(w-text_w)/2',
                    y=y_pos,
                    enable=f'between(t,{start_time},{end_time})'
                )
            
            return current_stream
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            # Fallback - –ø—Ä–æ—Å—Ç—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
            return self.add_simple_subtitles(video_stream, subtitles, width, height)
    
    def add_simple_subtitles(self, video_stream, subtitles: List[Dict], width: int, height: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ (fallback)"""
        try:
            if not subtitles:
                return video_stream
            
            current_stream = video_stream
            
            for subtitle in subtitles:
                start_time = subtitle['start']
                end_time = subtitle['end']
                text = subtitle['text'].replace("'", "").replace('"', '').replace('\\', '').strip()
                
                if not text:
                    continue
                
                # –ü–æ–∑–∏—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –Ω–∞ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ)
                y_pos = int(height * 0.78)
                
                current_stream = current_stream.filter(
                    'drawtext',
                    text=text,
                    fontfile='Robloxian-UltraBold.ttf',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç –∏–∑ –ø–∞–ø–∫–∏
                    fontsize=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
                    fontcolor='white',
                    bordercolor='black',
                    borderw=8,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —á–µ—Ä–Ω–∞—è —Ä–∞–º–∫–∞
                    x='(w-text_w)/2',
                    y=y_pos,
                    enable=f'between(t,{start_time},{end_time})'
                )
            
            return current_stream
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return video_stream
    
    def create_subtitle_overlay(self, subtitles: List[Dict], width: int, height: int, duration: float):
        """–°–æ–∑–¥–∞–µ—Ç overlay —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            subtitle_bg = ffmpeg.input('color=c=black@0.0:s={}x{}:d={}'.format(width, height, duration), f='lavfi')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            current_overlay = subtitle_bg
            
            for subtitle in subtitles:
                start_time = subtitle['start']
                end_time = subtitle['end']
                text = subtitle['text'].replace("'", "\\'").replace('"', '\\"')
                
                # –ü–æ–∑–∏—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                y_pos = int(height * 0.85)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                current_overlay = current_overlay.filter(
                    'drawtext',
                    text=text,
                    fontfile='C:/Windows/Fonts/arial.ttf',
                    fontsize=48,
                    fontcolor='white',
                    bordercolor='black',
                    borderw=3,
                    x='(w-text_w)/2',
                    y=y_pos,
                    enable=f'between(t,{start_time},{end_time})'
                )
            
            return current_overlay
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è overlay —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return None
    
    def add_banner_with_chromakey(self, video_stream, banner_path: str, width: int, height: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–Ω–Ω–µ—Ä —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ —Ö—Ä–æ–º–∞–∫–µ—è"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–Ω–Ω–µ—Ä
            banner = ffmpeg.input(banner_path, stream_loop=-1)  # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ö—Ä–æ–º–∞–∫–µ–π (—Ü–≤–µ—Ç #800080 –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º colorkey —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
            banner_keyed = banner.filter(
                'colorkey',
                color='0x800080',  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç –≤ hex
                similarity=0.3,    # –î–æ–ø—É—Å–∫ –ø–æ —Ü–≤–µ—Ç—É (0.0-1.0)
                blend=0.1          # –°–º—è–≥—á–µ–Ω–∏–µ –∫—Ä–∞–µ–≤
            )
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –±–∞–Ω–Ω–µ—Ä –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            banner_scaled = banner_keyed.filter('scale', width, height)
            
            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            # –ë–∞–Ω–Ω–µ—Ä –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ –≤–∏–¥–µ–Ω –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            composed = ffmpeg.overlay(video_stream, banner_scaled, x=0, y=0)
            
            logger.info("–ë–∞–Ω–Ω–µ—Ä —Å —Ö—Ä–æ–º–∞–∫–µ–µ–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            return composed
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞ —Å —Ö—Ä–æ–º–∞–∫–µ–µ–º: {e}")
            return video_stream
    
    def get_file_size(self, file_path: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö"""
        try:
            return os.path.getsize(file_path)
        except:
            return 0