import os
import zipfile
from faster_whisper import WhisperModel
import ffmpeg
from pathlib import Path
from typing import List, Dict, Tuple, Optional
import logging
import asyncio
import json
import math
import subprocess
import tempfile
import re
from tqdm import tqdm
import threading
import time

from google_drive_uploader import upload_to_drive

from config import (
    FONT_PATH, FONT_SIZE, FONT_COLOR, STROKE_COLOR, STROKE_WIDTH, 
    TOP_HEADER_FONT_SIZE, BOTTOM_HEADER_FONT_SIZE, HEADER_FONT_COLOR, HEADER_STROKE_COLOR, HEADER_STROKE_WIDTH, 
    MAIN_VIDEO_SCALE,
    BANNER_ENABLED, BANNER_PATH, BANNER_X, BANNER_Y, 
    CHROMA_KEY_COLOR, CHROMA_KEY_SIMILARITY, CHROMA_KEY_BLEND,
    BACKGROUND_MUSIC_ENABLED, BACKGROUND_MUSIC_PATH, BACKGROUND_MUSIC_VOLUME,
    CHUNK_DURATION_SECONDS, CLIP_DURATION_SECONDS
)

from PIL import Image
import cv2
import numpy as np

logger = logging.getLogger(__name__)

class FastVideoProcessor:
    def __init__(self, temp_dir: Path):
        self.temp_dir = temp_dir
        self.temp_dir.mkdir(exist_ok=True)
        
        try:
            self.whisper_model = WhisperModel("base", device="cpu", compute_type="int8")
            logger.info("–ú–æ–¥–µ–ª—å Faster-Whisper 'base' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (CPU, int8)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Faster-Whisper: {e}")
            self.whisper_model = None

    async def process_video(self, video_path: str, chat_id: int, top_header: str = None, bottom_header: str = None, background_music_path: Optional[str] = None, segment_duration: Optional[int] = None, settings: Optional[Dict] = None) -> Optional[str]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        try:
            chat_dir = self.temp_dir / str(chat_id)
            chat_dir.mkdir(exist_ok=True)
            
            video_info = await self.get_video_info(video_path)
            duration = video_info.get('duration', 0)
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {duration} —Å–µ–∫—É–Ω–¥")
            
            if duration > 300:
                chunks = await self.split_video_into_chunks(video_path, chat_dir)
            else:
                chunks = [video_path]
            
            processed_videos = []
            for i, chunk_path in enumerate(chunks):
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ {i+1}/{len(chunks)}")
                subtitles = await self.generate_subtitles(chunk_path)
                vertical_video = await self.create_vertical_video_fast(
                    chunk_path, subtitles, chat_dir, i, background_music_path, chat_id, top_header, bottom_header, settings=settings
                )
                if vertical_video:
                    processed_videos.append(vertical_video)
            
            if processed_videos:
                upload_result = await self.cut_and_upload_to_drive(processed_videos, chat_id, clip_duration=segment_duration)
                return upload_result
            
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return None

    async def cut_and_upload_to_drive(self, video_paths: List[str], chat_id: int, clip_duration: Optional[int] = None) -> Optional[str]:
        """–ù–∞—Ä–µ–∑–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –Ω–∞ Google Drive –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å—Å—ã–ª–∫–∞–º–∏."""
        try:
            chat_dir = self.temp_dir / str(chat_id)
            final_clips_dir = chat_dir / "final_clips"
            final_clips_dir.mkdir(exist_ok=True)
            
            folder_name = f"final_videos_{chat_id}"
            
            # –í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–ø–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            actual_clip_duration = clip_duration if clip_duration and clip_duration > 0 else CLIP_DURATION_SECONDS
            
            clip_paths = []
            for i, video_path in enumerate(video_paths):
                video_info = await self.get_video_info(video_path)
                total_duration = video_info['duration']
                num_segments = math.ceil(total_duration / actual_clip_duration)
                
                for j in range(num_segments):
                    start_time = j * actual_clip_duration
                    output_path = final_clips_dir / f"clip_{i}_{j}.mp4"
                    
                    (
                        ffmpeg.input(video_path, ss=start_time, t=actual_clip_duration)
                        .output(str(output_path), avoid_negative_ts='make_zero')
                        .overwrite_output()
                        .run(quiet=True)
                    )
                    clip_paths.append(output_path)

            uploaded_links = []
            loop = asyncio.get_event_loop()
            for clip_path in clip_paths:
                link = await loop.run_in_executor(None, upload_to_drive, str(clip_path), folder_name)
                if link:
                    direct_link = self.to_drive_direct_download(link)
                    uploaded_links.append(direct_link)
            
            links_file_path = chat_dir / "uploaded_links.txt"
            with open(links_file_path, "w", encoding="utf-8") as f:
                f.write("\n".join(uploaded_links))

            return str(links_file_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Ä–µ–∑–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive: {e}")
            return None

    async def get_video_info(self, video_path: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
        try:
            def get_info():
                probe = ffmpeg.probe(video_path)
                video_stream = next((stream for stream in probe['streams'] if stream['codec_type'] == 'video'), None)
                return {
                    'duration': float(probe['format']['duration']),
                    'width': int(video_stream['width']),
                    'height': int(video_stream['height']),
                    'fps': eval(video_stream['r_frame_rate'])
                }
            loop = asyncio.get_event_loop()
            return await loop.run_in_executor(None, get_info)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
            return {'duration': 0, 'width': 1920, 'height': 1080, 'fps': 30}

    async def split_video_into_chunks(self, video_path: str, output_dir: Path) -> List[str]:
        """–ù–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 5 –º–∏–Ω—É—Ç"""
        try:
            video_info = await self.get_video_info(video_path)
            total_duration = video_info['duration']
            chunk_count = math.ceil(total_duration / CHUNK_DURATION_SECONDS)
            chunks = []

            logger.info(f"‚úÇÔ∏è –ù–∞—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ {chunk_count} —á–∞–Ω–∫–æ–≤...")
            with tqdm(total=chunk_count, desc="‚úÇÔ∏è –ù–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ", unit="—á–∞–Ω–∫") as pbar:
                for i in range(chunk_count):
                    start_time = i * CHUNK_DURATION_SECONDS
                    output_path = output_dir / f"chunk_{i:03d}.mp4"
                    (ffmpeg.input(video_path, ss=start_time, t=CHUNK_DURATION_SECONDS).output(str(output_path), c='copy', avoid_negative_ts='make_zero').overwrite_output().run(quiet=True))
                    chunks.append(str(output_path))
                    pbar.update(1)
            
            logger.info(f"–í–∏–¥–µ–æ –Ω–∞—Ä–µ–∑–∞–Ω–æ –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤")
            return chunks
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return [video_path]

    async def generate_subtitles(self, video_path: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ Faster-Whisper"""
        try:
            if not self.whisper_model:
                logger.error("–ú–æ–¥–µ–ª—å Faster-Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return []
            def transcribe():
                logger.info("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —á–µ—Ä–µ–∑ Faster-Whisper AI...")
                segments, info = self.whisper_model.transcribe(video_path, word_timestamps=True, language='ru', beam_size=5)
                subtitles = []
                total_segments = info.duration
                with tqdm(total=total_segments, desc="üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—á–∏", unit="—Å–µ–∫") as pbar:
                    for segment in segments:
                        if segment.words:
                            for word in segment.words:
                                subtitles.append({'start': word.start, 'end': word.end, 'text': word.word.strip(), 'confidence': word.probability})
                        pbar.update(segment.end - segment.start)
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —è–∑—ã–∫: {info.language} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {info.language_probability:.2f})")
                return subtitles
            loop = asyncio.get_event_loop()
            subtitles = await loop.run_in_executor(None, transcribe)
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(subtitles)} —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
            return subtitles
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return []

    async def create_vertical_video_fast(
        self, video_path: str, subtitles: List[Dict], output_dir: Path, chunk_index: int,
        background_music_path: Optional[str] = None, chat_id: int = None,
        top_header: str = None, bottom_header: str = None, settings: Optional[Dict] = None
    ) -> Optional[str]:
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ FFmpeg"""
        output_path = output_dir / f"vertical_{chunk_index:03d}.mp4"
        srt_path = output_dir / f"subtitles_{chunk_index:03d}.srt"
        
        # Resolve settings with fallbacks to global config
        s = settings or {}
        main_video_scale = s.get('layout', {}).get('main_video_scale', MAIN_VIDEO_SCALE)
        music_enabled = s.get('background_music', {}).get('enabled', BACKGROUND_MUSIC_ENABLED)
        music_path_cfg = s.get('background_music', {}).get('path', BACKGROUND_MUSIC_PATH)
        music_volume = s.get('background_music', {}).get('volume', BACKGROUND_MUSIC_VOLUME)
        banner_enabled = s.get('banner', {}).get('enabled', BANNER_ENABLED)
        banner_path = s.get('banner', {}).get('path', BANNER_PATH)
        banner_x = s.get('banner', {}).get('x', BANNER_X)
        banner_y = s.get('banner', {}).get('y', BANNER_Y)
        chroma_color = s.get('banner', {}).get('chroma_key_color', CHROMA_KEY_COLOR)
        chroma_similarity = s.get('banner', {}).get('chroma_key_similarity', CHROMA_KEY_SIMILARITY)
        chroma_blend = s.get('banner', {}).get('chroma_key_blend', CHROMA_KEY_BLEND)
        subs_font_path = (Path(__file__).parent / s.get('subtitles', {}).get('font_path', FONT_PATH)).as_posix()
        subs_font_size = int(s.get('subtitles', {}).get('font_size', FONT_SIZE) * 1.5)
        subs_font_color = s.get('subtitles', {}).get('font_color', FONT_COLOR)
        subs_stroke_color = s.get('subtitles', {}).get('stroke_color', STROKE_COLOR)
        subs_stroke_width = s.get('subtitles', {}).get('stroke_width', STROKE_WIDTH)
        header_font_color = s.get('headers', {}).get('header_font_color', HEADER_FONT_COLOR)
        header_stroke_color = s.get('headers', {}).get('header_stroke_color', HEADER_STROKE_COLOR)
        header_stroke_width = s.get('headers', {}).get('header_stroke_width', HEADER_STROKE_WIDTH)
        top_font_size = s.get('headers', {}).get('top_font_size', TOP_HEADER_FONT_SIZE)
        bottom_font_size = s.get('headers', {}).get('bottom_font_size', BOTTOM_HEADER_FONT_SIZE)

        try:
            def create_vertical():
                
                logger.info("–°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ FFmpeg...")
                probe = ffmpeg.probe(video_path)
                video_stream = next(s for s in probe['streams'] if s['codec_type'] == 'video')
                width, height = int(video_stream['width']), int(video_stream['height'])
                target_width, target_height = 1080, 1920
                self.create_srt_file(subtitles, srt_path)

                # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ: –¥–µ–ª–∞–µ–º –µ–≥–æ –±–æ–ª—å—à–µ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –±–æ–∫–∞–º
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –Ω–∞ 100%, –∞ –≤—ã—Å–æ—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ 70%
                main_video_height_on_canvas = int(target_height * main_video_scale)
                main_video_width_on_canvas = target_width

                # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ (3:4)
                new_aspect_ratio = main_video_width_on_canvas / main_video_height_on_canvas

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –∫—Ä–æ–ø–∞—Ç—å: –ø–æ —à–∏—Ä–∏–Ω–µ –∏–ª–∏ –ø–æ –≤—ã—Å–æ—Ç–µ
                if (width / height) > new_aspect_ratio:
                    # –í–∏–¥–µ–æ —à–∏—Ä–µ, —á–µ–º –Ω—É–∂–Ω–æ -> –∫—Ä–æ–ø–∞–µ–º —à–∏—Ä–∏–Ω—É
                    new_width = int(height * new_aspect_ratio)
                    crop_x = (width - new_width) // 2
                    crop_y = 0
                    crop_width = new_width
                    crop_height = height
                else:
                    # –í–∏–¥–µ–æ –≤—ã—à–µ, —á–µ–º –Ω—É–∂–Ω–æ -> –∫—Ä–æ–ø–∞–µ–º –≤—ã—Å–æ—Ç—É
                    new_height = int(width / new_aspect_ratio)
                    crop_x = 0
                    crop_y = (height - new_height) // 2
                    crop_width = width
                    crop_height = new_height
                
                input_video = ffmpeg.input(video_path, **{'noautorotate': None})
                background = input_video.filter('scale', target_width, target_height).filter('gblur', sigma=20)
                
                # –û–±—Ä–µ–∑–∞–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ
                main_video = input_video.crop(crop_x, crop_y, crop_width, crop_height)
                main_video = main_video.filter('scale', main_video_width_on_canvas, main_video_height_on_canvas)

                # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ
                x_offset = (target_width - main_video_width_on_canvas) // 2
                y_offset = (target_height - main_video_height_on_canvas) // 2
                composed = ffmpeg.overlay(background, main_video, x=x_offset, y=y_offset).filter('setdar', '9/16')
                duration = float(probe['format']['duration'])

                
                
                audio = input_video.audio
                if music_enabled:
                    music_path_to_use = background_music_path or self.get_custom_background_music(chat_id) or music_path_cfg
                    if music_path_to_use and os.path.exists(music_path_to_use):
                        audio = self.add_background_music(audio, music_path_to_use, duration, music_volume)

                if subtitles:
                    composed = self.add_animated_subtitles(composed, subtitles, target_width, target_height, subs_font_path, subs_font_size, subs_font_color, subs_stroke_color, subs_stroke_width)

                if top_header:
                    composed = self.add_header(composed, top_header, target_width, target_height, 'top', top_font_size, header_font_color, header_stroke_color, header_stroke_width)
                if bottom_header:
                    composed = self.add_header(composed, bottom_header, target_width, target_height, 'bottom', bottom_font_size, header_font_color, header_stroke_color, header_stroke_width)

                if banner_enabled and os.path.exists(banner_path):
                    composed = self.add_ivideo_banner(composed, banner_path, duration, chroma_color, chroma_similarity, chroma_blend, banner_x, banner_y)

                if audio:
                    output_args = ffmpeg.output(composed, audio, str(output_path), vcodec='libx264', acodec='aac', preset='fast', crf=18, pix_fmt='yuv420p', movflags='faststart').overwrite_output()
                else:
                    output_args = ffmpeg.output(composed, str(output_path), vcodec='libx264', preset='fast', crf=23, pix_fmt='yuv420p', movflags='faststart').overwrite_output()
                
                cmd_args = ffmpeg.compile(output_args)
                logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ...")
                success = self.run_ffmpeg_with_progress(cmd_args, duration, f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ {chunk_index+1}")
                
                if not success:
                    logger.warning("–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∑–∞–ø—É—Å–∫–∞–µ–º FFmpeg –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º...")
                    try:
                        output_args.run(quiet=True, overwrite_output=True)
                        success = True
                    except ffmpeg.Error as e:
                        logger.error(f"FFmpeg –æ—à–∏–±–∫–∞: {e.stderr.decode('utf-8', errors='ignore')}")
                        return None
                
                if not success:
                    return None
                return str(output_path)

            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(None, create_vertical)
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {result}")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
            return None
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if srt_path.exists(): srt_path.unlink() 
            

    def create_srt_file(self, subtitles: List[Dict], srt_path: Path):
        try:
            with open(srt_path, 'w', encoding='utf-8') as f:
                for i, subtitle in enumerate(subtitles, 1):
                    start_time = self.seconds_to_srt_time(subtitle['start'])
                    end_time = self.seconds_to_srt_time(subtitle['end'])
                    f.write(f"{i}\n{start_time} --> {end_time}\n{subtitle['text']}\n\n")
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SRT —Ñ–∞–π–ª–∞: {e}")

    def seconds_to_srt_time(self, seconds: float) -> str:
        hours, rem = divmod(seconds, 3600)
        minutes, seconds = divmod(rem, 60)
        return f"{int(hours):02d}:{int(minutes):02d}:{int(seconds):02d},{int((seconds % 1) * 1000):03d}"

    def cleanup_temp_files(self, chat_id: int):
        try:
            chat_dir = self.temp_dir / str(chat_id)
            if chat_dir.exists():
                import shutil
                shutil.rmtree(chat_dir)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —á–∞—Ç–∞ {chat_id} —É–¥–∞–ª–µ–Ω—ã")
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    def run_ffmpeg_with_progress(self, cmd_args: List[str], duration: float, description: str = "Processing"):
        try:
            process = subprocess.Popen(cmd_args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True, encoding='utf-8', errors='ignore')
            with tqdm(total=100, desc=description, unit='%', bar_format='{l_bar}{bar}| {n:.1f}% [{elapsed}<{remaining}]') as pbar:
                stderr_lines = []
                for line in process.stderr:
                    stderr_lines.append(line.strip())
                    time_match = re.search(r'time=(\d+):(\d+):(\d+\.\d+)', line)
                    if time_match:
                        h, m, s = map(float, time_match.groups())
                        current_time = h * 3600 + m * 60 + s
                        progress = min((current_time / duration) * 100, 100)
                        pbar.n = progress
                        pbar.refresh()
            return_code = process.wait(timeout=3600) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 1 —á–∞—Å–∞
            if return_code != 0:
                logger.error(f"FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {return_code}")
                logger.error("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –≤—ã–≤–æ–¥–∞ FFmpeg:")
                for line in stderr_lines[-10:]:
                    logger.error(f"  {line}")
                return False
            return True
        except subprocess.TimeoutExpired:
            logger.error("FFmpeg –ø—Ä–æ—Ü–µ—Å—Å –±—ã–ª —É–±–∏—Ç –ø–æ —Ç–∞–π–º–∞—É—Ç—É (1 —á–∞—Å)")
            process.kill()
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FFmpeg —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: {e}")
            return False

    def add_animated_subtitles(self, video_stream, subtitles: List[Dict], width: int, height: int, font_path: str, font_size: int, font_color: str, stroke_color: str, stroke_width: int):
        try:
            if not subtitles:
                return video_stream

            for sub in subtitles:
                text = sub['text'].replace("'", "‚Äô").replace('"', '‚Äù').strip()
                if not text:
                    continue

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è
                base_font_size = int(font_size)
                y_pos = int(height * 0.67)
                
                # Fade-in animation
                fade_duration = 0.2
                alpha_expr = f"if(lt(t,{sub['start']}),0,if(lt(t,{sub['start']}+{fade_duration}),(t-{sub['start']})/{fade_duration},1))"

                video_stream = video_stream.filter(
                    'drawtext',
                    text=text,
                    fontfile=font_path,
                    fontsize=base_font_size,
                    fontcolor=f"{font_color}",
                    bordercolor=f"{stroke_color}",
                    borderw=stroke_width,
                    x='(w-text_w)/2',
                    y=y_pos,
                    enable=f'between(t,{sub["start"]},{sub["end"]})',
                    alpha=alpha_expr
                )
            return video_stream
        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return video_stream

    def get_file_size(self, file_path: str) -> int:
        try: return os.path.getsize(file_path)
        except: return 0

    def to_drive_direct_download(self, link: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É Google Drive –≤ –ø—Ä—è–º—É—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã:
            # - https://drive.google.com/file/d/<FILE_ID>/view?usp=sharing
            # - https://drive.google.com/open?id=<FILE_ID>
            # - https://drive.google.com/uc?id=<FILE_ID>&export=download
            # - https://drive.google.com/uc?export=download&id=<FILE_ID>
            patterns = [
                r"https?://drive\.google\.com/file/d/([a-zA-Z0-9_-]+)/",
                r"https?://drive\.google\.com/open\?id=([a-zA-Z0-9_-]+)",
                r"https?://drive\.google\.com/uc\?id=([a-zA-Z0-9_-]+)",
                r"https?://drive\.google\.com/uc\?export=download&id=([a-zA-Z0-9_-]+)"
            ]
            file_id = None
            for pat in patterns:
                m = re.search(pat, link)
                if m:
                    file_id = m.group(1)
                    break
            if not file_id:
                return link
            return f"https://drive.google.com/uc?export=download&id={file_id}"
        except Exception:
            return link

    def upload_custom_background_music(self, music_file_path: str, chat_id: int) -> Optional[str]:
        try:
            chat_dir = self.temp_dir / str(chat_id)
            chat_dir.mkdir(exist_ok=True)
            import shutil
            custom_music_path = chat_dir / f"custom_music_{chat_id}.mp3"
            shutil.copy2(music_file_path, custom_music_path)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º—É–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {custom_music_path}")
            return str(custom_music_path)
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º—É–∑—ã–∫–∏: {e}")
        return None

    def get_custom_background_music(self, chat_id: int) -> Optional[str]:
        try:
            custom_music_path = self.temp_dir / str(chat_id) / f"custom_music_{chat_id}.mp3"
            if custom_music_path.exists(): return str(custom_music_path)
            return None
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º—É–∑—ã–∫–∏: {e}")
        return None

    def add_background_music(self, original_audio, music_path: str, video_duration: float, volume: float = 0.1):
        try:
            if not os.path.exists(music_path): return original_audio
            music_stream = ffmpeg.input(music_path).filter('aloop', loop=-1, size=0).filter('atrim', duration=video_duration).filter('volume', volume)
            if original_audio:
                return ffmpeg.filter([original_audio, music_stream], 'amix', inputs=2, duration='first')
            return music_stream
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏: {e}")
        return original_audio

    def get_default_background_music(self) -> Optional[str]:
        try:
            default_music_path = Path(__file__).parent / "assets" / "default_background_music.mp3"
            if default_music_path.exists(): return str(default_music_path)
            alt_music_path = self.temp_dir / "default_background_music.mp3"
            if alt_music_path.exists(): return str(alt_music_path)
            return None
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        return None

    def add_header(self, video_stream, header_text: str, width: int, height: int, position: str = 'top', font_size: int = 60, font_color: str = HEADER_FONT_COLOR, stroke_color: str = HEADER_STROKE_COLOR, stroke_width: int = HEADER_STROKE_WIDTH):
        try:
            if not header_text: return video_stream
            text = header_text.replace("'", "").replace('"', "").replace('\\', '').strip()
            if not text: return video_stream
            y_pos = int(height * 0.05) if position == 'top' else int(height * 0.12)
            font_path = (Path(__file__).parent / FONT_PATH).as_posix()
            return video_stream.filter('drawtext', text=text, fontfile=font_path, fontsize=font_size, fontcolor=font_color, bordercolor=stroke_color, borderw=stroke_width, x='(w-text_w)/2', y=y_pos, enable='gte(t,0)')
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ {position}: {e}")
        return video_stream

    def add_ivideo_banner(self, video_stream, banner_path: str, duration: float, chroma_key_color: str, similarity: float, blend: float, x: int, y: int):
        try:
            banner = ffmpeg.input(banner_path, stream_loop=-1).filter('colorkey', color=chroma_key_color, similarity=similarity, blend=blend)
            return ffmpeg.overlay(video_stream, banner, x=x, y=y, eof_action='pass').filter('trim', duration=duration)
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è iVideo –±–∞–Ω–Ω–µ—Ä–∞: {e}")
        return video_stream