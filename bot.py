import logging
import asyncio
import re
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    ContextTypes, 
    CallbackQueryHandler,
    filters
)
from telegram.constants import ParseMode
from telegram.error import BadRequest

from config import BOT_TOKEN, DOWNLOAD_DIR, COOKIES_FILE, MAX_FILE_SIZE, DEFAULT_TOP_HEADER, DEFAULT_BOTTOM_HEADER
from youtube_downloader import YouTubeDownloader
from video_processor_fast import FastVideoProcessor
from user_settings import load_user_settings, update_user_settings, get_value

USER_ASSETS_DIR = Path('user_assets')
USER_ASSETS_DIR.mkdir(exist_ok=True)

# ======= –£–¢–ò–õ–ò–¢–´ =======

def normalize_cookies_text(raw: str) -> str:
    lines = raw.splitlines()
    out_lines = []
    for line in lines:
        if not line.strip():
            out_lines.append('')
            continue
        if line.lstrip().startswith('#'):
            out_lines.append(line)
            continue
        parts = re.split(r'\s+', line.strip())
        if len(parts) >= 7:
            parts = parts[:7]
            out_lines.append('\t'.join(parts))
        else:
            # keep original to avoid data loss
            out_lines.append(line)
    return '\n'.join(out_lines) + ('\n' if not raw.endswith('\n') else '')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
downloader = YouTubeDownloader(DOWNLOAD_DIR, COOKIES_FILE)
processor = FastVideoProcessor(DOWNLOAD_DIR / 'temp')

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è YouTube URL
YOUTUBE_URL_PATTERN = re.compile(
    r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/'
    r'(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'
)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pending_actions = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
user_headers = {}
user_timelines = {}
DEFAULT_TIMELINE = 30

# ======= –ö–ù–û–ü–ö–ò –ù–ê–°–¢–†–û–ï–ö =======

def build_main_settings_kb(chat_id: int) -> InlineKeyboardMarkup:
    settings = load_user_settings(chat_id)
    def as_on_off(path: str) -> str:
        return 'ON' if bool(get_value(settings, path, False)) else 'OFF'
    keyboard = [
        [InlineKeyboardButton('üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏', callback_data='CFG:HEADERS')],
        [InlineKeyboardButton('‚è±Ô∏è –¢–∞–π–º–ª–∞–π–Ω', callback_data='CFG:TIMELINE')],
        [InlineKeyboardButton('üéõÔ∏è –°—É–±—Ç–∏—Ç—Ä—ã', callback_data='CFG:SUBTITLES')],
        [InlineKeyboardButton('üìê –ú–∞–∫–µ—Ç', callback_data='CFG:LAYOUT')],
        [InlineKeyboardButton(f'üéµ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞: {as_on_off("background_music.enabled")}', callback_data='CFG:BG_MUSIC')],
        [InlineKeyboardButton(f'üñºÔ∏è –ë–∞–Ω–Ω–µ—Ä: {as_on_off("banner.enabled")}', callback_data='CFG:BANNER')],
        [InlineKeyboardButton('üç™ Cookies', callback_data='CFG:COOKIES')],
        [InlineKeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='CFG:CLOSE')]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_headers_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–¢–µ–∫—Å—Ç—ã: –æ–±–∞', callback_data='CFG:H:SET_BOTH')],
        [InlineKeyboardButton('–¢–µ–∫—Å—Ç: –≤–µ—Ä—Ö', callback_data='CFG:H:SET_TOP'), InlineKeyboardButton('–¢–µ–∫—Å—Ç: –Ω–∏–∑', callback_data='CFG:H:SET_BOTTOM')],
        [InlineKeyboardButton('–†–∞–∑–º–µ—Ä: –≤–µ—Ä—Ö', callback_data='CFG:H:TOP_SIZE'), InlineKeyboardButton('–†–∞–∑–º–µ—Ä: –Ω–∏–∑', callback_data='CFG:H:BOTTOM_SIZE')],
        [InlineKeyboardButton('–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞', callback_data='CFG:H:COLOR'), InlineKeyboardButton('–¶–≤–µ—Ç –∫–æ–Ω—Ç—É—Ä–∞', callback_data='CFG:H:STROKE_COLOR')],
        [InlineKeyboardButton('–¢–æ–ª—â–∏–Ω–∞ –∫–æ–Ω—Ç—É—Ä–∞', callback_data='CFG:H:STROKE_WIDTH')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='CFG:BACK')]
    ])

def build_timeline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', callback_data='CFG:T:SET')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='CFG:BACK')]
    ])

def build_subtitles_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞', callback_data='CFG:S:FONT_SIZE'), InlineKeyboardButton('–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞', callback_data='CFG:S:FONT_COLOR')],
        [InlineKeyboardButton('–ö–æ–Ω—Ç—É—Ä —Ü–≤–µ—Ç', callback_data='CFG:S:STROKE_COLOR'), InlineKeyboardButton('–ö–æ–Ω—Ç—É—Ä —Ç–æ–ª—â–∏–Ω–∞', callback_data='CFG:S:STROKE_WIDTH')],
        [InlineKeyboardButton('–§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ (–ø—É—Ç—å)', callback_data='CFG:S:FONT_PATH')],
        [InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞', callback_data='CFG:S:FONT_UPLOAD')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='CFG:BACK')]
    ])

def build_layout_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–ú–∞—Å—à—Ç–∞–± –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ', callback_data='CFG:L:SCALE')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='CFG:BACK')]
    ])

def build_bg_music_kb(chat_id: int) -> InlineKeyboardMarkup:
    settings = load_user_settings(chat_id)
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å ON/OFF', callback_data='CFG:BGM:TOGGLE')],
        [InlineKeyboardButton('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É', callback_data='CFG:BGM:PATH'), InlineKeyboardButton('–ì—Ä–æ–º–∫–æ—Å—Ç—å', callback_data='CFG:BGM:VOL')],
        [InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º—É–∑—ã–∫–∏', callback_data='CFG:BGM:UPLOAD')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='CFG:BACK')]
    ])

def build_banner_kb(chat_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å ON/OFF', callback_data='CFG:BN:TOGGLE')],
        [InlineKeyboardButton('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É', callback_data='CFG:BN:PATH')],
        [InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –±–∞–Ω–Ω–µ—Ä–∞', callback_data='CFG:BN:UPLOAD')],
        [InlineKeyboardButton('–ü–æ–∑–∏—Ü–∏—è X', callback_data='CFG:BN:X'), InlineKeyboardButton('–ü–æ–∑–∏—Ü–∏—è Y', callback_data='CFG:BN:Y')],
        [InlineKeyboardButton('Chroma —Ü–≤–µ—Ç', callback_data='CFG:BN:COLOR')],
        [InlineKeyboardButton('Chroma similarity', callback_data='CFG:BN:SIM'), InlineKeyboardButton('Chroma blend', callback_data='CFG:BN:BLEND')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='CFG:BACK')]
    ])

def build_cookies_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å cookies.txt —Ñ–∞–π–ª–æ–º', callback_data='CFG:CK:UPLOAD')],
        [InlineKeyboardButton('–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç cookies', callback_data='CFG:CK:TEXT')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='CFG:BACK')]
    ])

# ======= –ö–û–ú–ê–ù–î–´ =======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–Ø –ø—Ä–µ–≤—Ä–∞—â–∞—é YouTube‚Äë–≤–∏–¥–µ–æ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–ø—ã 9:16 —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–æ–π –∏ –±–∞–Ω–Ω–µ—Ä–æ–º.\n\n"
        "üîπ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å</b>\n"
        "1) –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube\n"
        "2) –ü–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî —è –≤—Å—ë —Å–¥–µ–ª–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
        "‚Ä¢ /settings ‚Äî –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n\n"
        "‚ÑπÔ∏è <b>–ü–æ–¥—Å–∫–∞–∑–∫–∏</b>\n"
        "‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –Ω–∞—Ä–µ–∑–∞—é—Ç—Å—è –Ω–∞ —á–∞–Ω–∫–∏\n"
        "‚Ä¢ –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤ >50MB ‚Äî –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫–∏ Google Drive"
    )
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.HTML
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üÜò <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å</b>\n\n"
        "üìù <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:</b>\n"
        "‚Ä¢ https://www.youtube.com/watch?v=VIDEO_ID\n"
        "‚Ä¢ https://youtu.be/VIDEO_ID\n"
        "‚Ä¢ https://m.youtube.com/watch?v=VIDEO_ID\n\n"
        "üé¨ <b>–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>\n"
        "1Ô∏è‚É£ <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ</b> - –ø–æ–ª—É—á–∞—é –≤–∏–¥–µ–æ –≤ HD –∫–∞—á–µ—Å—Ç–≤–µ\n"
        "2Ô∏è‚É£ <b>–ê–Ω–∞–ª–∏–∑</b> - –ø—Ä–æ–≤–µ—Ä—è—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "3Ô∏è‚É£ <b>–ù–∞—Ä–µ–∑–∫–∞</b> - –¥–µ–ª—é –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 5 –º–∏–Ω—É—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n"
        "4Ô∏è‚É£ <b>–°—É–±—Ç–∏—Ç—Ä—ã</b> - –≥–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Whisper AI\n"
        "5Ô∏è‚É£ <b>–§–æ—Ä–º–∞—Ç</b> - —Å–æ–∑–¥–∞—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ 9:16\n"
        "6Ô∏è‚É£ <b>–ê–Ω–∏–º–∞—Ü–∏—è</b> - –¥–æ–±–∞–≤–ª—è—é –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã\n"
        "7Ô∏è‚É£ <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏</b> - –¥–æ–±–∞–≤–ª—è—é –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–≤–µ—Ä—Ö—É\n\n"
        "‚ö° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ\n"
        "‚Ä¢ –û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é cookies\n"
        "‚Ä¢ –†–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤–æ –¥–ª—è TikTok, Instagram, YouTube Shorts\n\n"
        "‚ùó <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-10 –º–∏–Ω—É—Ç\n\n"
        "üîß <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –≤–∏–¥–µ–æ –ø–æ–∫–æ—Ä–æ—á–µ."
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.HTML
    )

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    await update.message.reply_text(
        "‚öôÔ∏è <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª. –ù–∞–∂–º–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –ø—Ä–∏—à–ª—é –ø—Ä–∏–º–µ—Ä, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ.",
        parse_mode=ParseMode.HTML,
        reply_markup=build_main_settings_kb(chat_id)
    )

async def headers_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /headers - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    chat_id = update.effective_chat.id
    
    settings = load_user_settings(chat_id)
    current_top = get_value(settings, 'headers.top', DEFAULT_TOP_HEADER)
    current_bottom = get_value(settings, 'headers.bottom', DEFAULT_BOTTOM_HEADER)
    
    help_text = (
        "üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤</b>\n\n"
        "–¢–µ–∫—É—â–∏–π –≤–µ—Ä—Ö: <code>" + str(current_top) + "</code>\n"
        "–¢–µ–∫—É—â–∏–π –Ω–∏–∑: <code>" + str(current_bottom) + "</code>\n\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ /settings ‚Üí –ó–∞–≥–æ–ª–æ–≤–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –ø—Ä–∏—à–ª—é –ø—Ä–∏–º–µ—Ä, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ."
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.HTML
    )

async def reset_headers_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_headers - —Å–±—Ä–æ—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    chat_id = update.effective_chat.id
    
    update_user_settings(chat_id, {"headers": {"top": DEFAULT_TOP_HEADER, "bottom": DEFAULT_BOTTOM_HEADER}})
    
    await update.message.reply_text(
        "üîÑ <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!</b>\n\n"
        f"üîù <b>–í–µ—Ä—Ö–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b> {DEFAULT_TOP_HEADER}\n"
        f"üîª <b>–ù–∏–∂–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b> {DEFAULT_BOTTOM_HEADER}\n\n"
        "–¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
        parse_mode=ParseMode.HTML
    )

async def timeline_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timeline - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Ä–µ–∑–∫–∏"""
    chat_id = update.effective_chat.id
    
    settings = load_user_settings(chat_id)
    current_timeline = int(get_value(settings, 'clips.duration_seconds', DEFAULT_TIMELINE))
    
    help_text = (
        f"‚è±Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Ä–µ–∑–∫–∏</b>\n\n"
        f"üïí <b>–¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {current_timeline} —Å–µ–∫—É–Ω–¥\n\n"
        f"üìã <b>–ü—Ä–∏–º–µ—Ä:</b> <code>—Ç–∞–π–º–ª–∞–π–Ω: 60</code>\n"
        f"–ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ /settings –¥–ª—è –∫–Ω–æ–ø–æ–∫."
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.HTML
    )

async def handle_timeline_setting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–ª–∞–π–Ω–∞"""
    text = update.message.text.strip()
    chat_id = update.effective_chat.id
    
    try:
        duration_str = text.split(':')[1].strip()
        duration = int(duration_str)
        
        if 5 <= duration <= 300:
            update_user_settings(chat_id, {"clips": {"duration_seconds": duration}})
            await update.message.reply_text(
                f"‚úÖ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ä–µ–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üïí <b>–ù–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration} —Å–µ–∫—É–Ω–¥",
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 300 —Å–µ–∫—É–Ω–¥.")
            
    except (IndexError, ValueError):
        await update.message.reply_text(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>—Ç–∞–π–º–ª–∞–π–Ω: [—Å–µ–∫—É–Ω–¥—ã]</code>",
            parse_mode=ParseMode.HTML
        )

def get_user_timeline(chat_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ä–µ–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = load_user_settings(chat_id)
    return int(get_value(settings, 'clips.duration_seconds', DEFAULT_TIMELINE))

def get_user_headers(chat_id: int) -> tuple:
    
    
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = load_user_settings(chat_id)
    top = get_value(settings, 'headers.top', DEFAULT_TOP_HEADER)
    bottom = get_value(settings, 'headers.bottom', DEFAULT_BOTTOM_HEADER)
    return top, bottom

def is_youtube_url(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç YouTube URL"""
    return bool(YOUTUBE_URL_PATTERN.search(text))

# ======= CALLBACKS –î–õ–Ø –ö–ù–û–ü–û–ö =======

async def settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    data = query.data

    if data == 'CFG:CLOSE':
        pending_actions.pop(chat_id, None)
        try:
            await query.edit_message_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫—Ä—ã—Ç–æ.")
        except BadRequest:
            pass
        return

    if data == 'CFG:BACK':
        try:
            await query.edit_message_text("‚öôÔ∏è <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª. –ù–∞–∂–º–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –ø—Ä–∏—à–ª—é –ø—Ä–∏–º–µ—Ä, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ.", parse_mode=ParseMode.HTML, reply_markup=build_main_settings_kb(chat_id))
        except BadRequest:
            pass
        pending_actions.pop(chat_id, None)
        return

    if data == 'CFG:HEADERS':
        try:
            await query.edit_message_text("üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—à–ª—é –ø—Ä–∏–º–µ—Ä, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=build_headers_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:TIMELINE':
        try:
            await query.edit_message_text("‚è±Ô∏è –¢–∞–π–º–ª–∞–π–Ω ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=build_timeline_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:SUBTITLES':
        try:
            await query.edit_message_text("üéõÔ∏è –°—É–±—Ç–∏—Ç—Ä—ã ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä.", reply_markup=build_subtitles_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:LAYOUT':
        try:
            await query.edit_message_text("üìê –ú–∞–∫–µ—Ç ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä.", reply_markup=build_layout_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:BG_MUSIC':
        settings = load_user_settings(chat_id)
        state = 'ON' if bool(get_value(settings, 'background_music.enabled', True)) else 'OFF'
        try:
            await query.edit_message_text(f"üéµ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ ‚Äî —Å–µ–π—á–∞—Å: {state}", reply_markup=build_bg_music_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BANNER':
        settings = load_user_settings(chat_id)
        state = 'ON' if bool(get_value(settings, 'banner.enabled', True)) else 'OFF'
        try:
            await query.edit_message_text(f"üñºÔ∏è –ë–∞–Ω–Ω–µ—Ä ‚Äî —Å–µ–π—á–∞—Å: {state}", reply_markup=build_banner_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:COOKIES':
        try:
            await query.edit_message_text("üç™ Cookies ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª:", reply_markup=build_cookies_kb())
        except BadRequest:
            pass
        return

    # Headers-specific
    if data == 'CFG:H:SET_BOTH':
        pending_actions[chat_id] = {"path": ["headers.top", "headers.bottom"], "type": "headers"}
        try:
            await query.edit_message_text(
                "–ü—Ä–∏–º–µ—Ä: <code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: –ú–û–ô –í–ï–†–• | –ú–û–ô –ù–ò–ó</code>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
                parse_mode=ParseMode.HTML,
                reply_markup=build_headers_kb()
            )
        except BadRequest:
            pass
        return
    if data == 'CFG:H:SET_TOP':
        pending_actions[chat_id] = {"path": "headers.top", "type": "str", "maxlen": 50}
        try:
            await query.edit_message_text(
                "–ü—Ä–∏–º–µ—Ä: <code>–≤–µ—Ä—Ö: –ú–û–ô –í–ï–†–•–ù–ò–ô</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=build_headers_kb()
            )
        except BadRequest:
            pass
        return
    if data == 'CFG:H:SET_BOTTOM':
        pending_actions[chat_id] = {"path": "headers.bottom", "type": "str", "maxlen": 50}
        try:
            await query.edit_message_text(
                "–ü—Ä–∏–º–µ—Ä: <code>–Ω–∏–∑: –ú–û–ô –ù–ò–ñ–ù–ò–ô</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=build_headers_kb()
            )
        except BadRequest:
            pass
        return
    if data == 'CFG:H:TOP_SIZE':
        pending_actions[chat_id] = {"path": "headers.top_font_size", "type": "int", "min": 10, "max": 200}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: –≤–µ—Ä—Ö —Ä–∞–∑–º–µ—Ä 50</code>", parse_mode=ParseMode.HTML, reply_markup=build_headers_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:H:BOTTOM_SIZE':
        pending_actions[chat_id] = {"path": "headers.bottom_font_size", "type": "int", "min": 10, "max": 200}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: –Ω–∏–∑ —Ä–∞–∑–º–µ—Ä 70</code>", parse_mode=ParseMode.HTML, reply_markup=build_headers_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:H:COLOR':
        pending_actions[chat_id] = {"path": "headers.header_font_color", "type": "color"}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: —Ü–≤–µ—Ç #FF0000</code>", parse_mode=ParseMode.HTML, reply_markup=build_headers_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:H:STROKE_COLOR':
        pending_actions[chat_id] = {"path": "headers.header_stroke_color", "type": "color"}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: –∫–æ–Ω—Ç—É—Ä —Ü–≤–µ—Ç #000000</code>", parse_mode=ParseMode.HTML, reply_markup=build_headers_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:H:STROKE_WIDTH':
        pending_actions[chat_id] = {"path": "headers.header_stroke_width", "type": "int", "min": 0, "max": 20}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: –∫–æ–Ω—Ç—É—Ä 2</code>", parse_mode=ParseMode.HTML, reply_markup=build_headers_kb())
        except BadRequest:
            pass
        return

    # Timeline
    if data == 'CFG:T:SET':
        pending_actions[chat_id] = {"path": "clips.duration_seconds", "type": "int", "min": 5, "max": 300}
        try:
            await query.edit_message_text(
                "–ü—Ä–∏–º–µ—Ä: <code>—Ç–∞–π–º–ª–∞–π–Ω: 60</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=build_timeline_kb()
            )
        except BadRequest:
            pass
        return

    # Subtitles
    if data == 'CFG:S:FONT_SIZE':
        pending_actions[chat_id] = {"path": "subtitles.font_size", "type": "int", "min": 10, "max": 120}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>sub: —Ä–∞–∑–º–µ—Ä 42</code>", parse_mode=ParseMode.HTML, reply_markup=build_subtitles_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:S:FONT_COLOR':
        pending_actions[chat_id] = {"path": "subtitles.font_color", "type": "color"}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>sub: —Ü–≤–µ—Ç #FFFFFF</code>", parse_mode=ParseMode.HTML, reply_markup=build_subtitles_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:S:STROKE_COLOR':
        pending_actions[chat_id] = {"path": "subtitles.stroke_color", "type": "color"}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>sub: –∫–æ–Ω—Ç—É—Ä —Ü–≤–µ—Ç #000000</code>", parse_mode=ParseMode.HTML, reply_markup=build_subtitles_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:S:STROKE_WIDTH':
        pending_actions[chat_id] = {"path": "subtitles.stroke_width", "type": "int", "min": 0, "max": 20}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>sub: –∫–æ–Ω—Ç—É—Ä 2</code>", parse_mode=ParseMode.HTML, reply_markup=build_subtitles_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:S:FONT_PATH':
        pending_actions[chat_id] = {"path": "subtitles.font_path", "type": "str", "maxlen": 200}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>sub: —à—Ä–∏—Ñ—Ç Obelix_Pro.ttf</code>", parse_mode=ParseMode.HTML, reply_markup=build_subtitles_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:S:FONT_UPLOAD':
        pending_actions[chat_id] = {"path": "subtitles.font_path", "type": "file_setting", "accept": [".ttf", ".otf"]}
        try:
            await query.edit_message_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ (.ttf/.otf) —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=build_subtitles_kb())
        except BadRequest:
            pass
        return

    # Layout
    if data == 'CFG:L:SCALE':
        pending_actions[chat_id] = {"path": "layout.main_video_scale", "type": "float", "minf": 0.3, "maxf": 1.0}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–º–∞–∫–µ—Ç: –º–∞—Å—à—Ç–∞–± 0.70</code>", parse_mode=ParseMode.HTML, reply_markup=build_layout_kb())
        except BadRequest:
            pass
        return

    # Background music
    if data == 'CFG:BGM:TOGGLE':
        settings = load_user_settings(chat_id)
        new_val = not bool(get_value(settings, 'background_music.enabled', True))
        update_user_settings(chat_id, {"background_music": {"enabled": new_val}})
        state = 'ON' if new_val else 'OFF'
        try:
            await query.edit_message_text(f"üéµ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ: {state}", reply_markup=build_bg_music_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BGM:PATH':
        pending_actions[chat_id] = {"path": "background_music.path", "type": "str", "maxlen": 300}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–º—É–∑—ã–∫–∞: –ø—É—Ç—å assets/default_background_music.mp3</code>", parse_mode=ParseMode.HTML, reply_markup=build_bg_music_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BGM:VOL':
        pending_actions[chat_id] = {"path": "background_music.volume", "type": "float", "minf": 0.0, "maxf": 2.0}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–º—É–∑—ã–∫–∞: –≥—Ä–æ–º–∫–æ—Å—Ç—å 0.1</code>", parse_mode=ParseMode.HTML, reply_markup=build_bg_music_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BGM:UPLOAD':
        pending_actions[chat_id] = {"path": "background_music.path", "type": "file_setting", "accept": [".mp3", ".wav", ".m4a", ".aac"]}
        try:
            await query.edit_message_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –º—É–∑—ã–∫–∏ (mp3/wav/m4a/aac).", reply_markup=build_bg_music_kb(chat_id))
        except BadRequest:
            pass
        return

    # Banner
    if data == 'CFG:BN:TOGGLE':
        settings = load_user_settings(chat_id)
        new_val = not bool(get_value(settings, 'banner.enabled', True))
        update_user_settings(chat_id, {"banner": {"enabled": new_val}})
        state = 'ON' if new_val else 'OFF'
        try:
            await query.edit_message_text(f"üñºÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ: {state}", reply_markup=build_banner_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BN:PATH':
        pending_actions[chat_id] = {"path": "banner.path", "type": "str", "maxlen": 300}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–±–∞–Ω–Ω–µ—Ä: –ø—É—Ç—å 0830.mov</code>", parse_mode=ParseMode.HTML, reply_markup=build_banner_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BN:UPLOAD':
        pending_actions[chat_id] = {"path": "banner.path", "type": "file_setting", "accept": [".mp4", ".mov", ".mkv", ".webm"]}
        try:
            await query.edit_message_text("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –±–∞–Ω–Ω–µ—Ä–∞ (mp4/mov/mkv/webm).", parse_mode=ParseMode.HTML, reply_markup=build_banner_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BN:X':
        pending_actions[chat_id] = {"path": "banner.x", "type": "int", "min": -5000, "max": 5000}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–±–∞–Ω–Ω–µ—Ä: x 0</code>", parse_mode=ParseMode.HTML, reply_markup=build_banner_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BN:Y':
        pending_actions[chat_id] = {"path": "banner.y", "type": "int", "min": -5000, "max": 5000}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–±–∞–Ω–Ω–µ—Ä: y 360</code>", parse_mode=ParseMode.HTML, reply_markup=build_banner_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BN:COLOR':
        pending_actions[chat_id] = {"path": "banner.chroma_key_color", "type": "color"}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–±–∞–Ω–Ω–µ—Ä: —Ü–≤–µ—Ç #000000</code>", parse_mode=ParseMode.HTML, reply_markup=build_banner_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BN:SIM':
        pending_actions[chat_id] = {"path": "banner.chroma_key_similarity", "type": "float", "minf": 0.0, "maxf": 1.0}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–±–∞–Ω–Ω–µ—Ä: sim 0.1</code>", parse_mode=ParseMode.HTML, reply_markup=build_banner_kb(chat_id))
        except BadRequest:
            pass
        return
    if data == 'CFG:BN:BLEND':
        pending_actions[chat_id] = {"path": "banner.chroma_key_blend", "type": "float", "minf": 0.0, "maxf": 1.0}
        try:
            await query.edit_message_text("–ü—Ä–∏–º–µ—Ä: <code>–±–∞–Ω–Ω–µ—Ä: blend 0.2</code>", parse_mode=ParseMode.HTML, reply_markup=build_banner_kb(chat_id))
        except BadRequest:
            pass
        return

    # Cookies
    if data == 'CFG:CK:UPLOAD':
        pending_actions[chat_id] = {"type": "cookies_file"}
        try:
            await query.edit_message_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª cookies.txt —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=build_cookies_kb())
        except BadRequest:
            pass
        return
    if data == 'CFG:CK:TEXT':
        pending_actions[chat_id] = {"type": "cookies_text"}
        try:
            await query.edit_message_text("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç cookies (–∫–∞–∫ –≤ cookies.txt).", reply_markup=build_cookies_kb())
        except BadRequest:
            pass
        return

# ======= –ü–†–ò–ï–ú –¢–ï–ö–°–¢–ê/–§–ê–ô–õ–û–í –î–õ–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í =======

def _parse_color(value: str) -> str:
    v = value.strip()
    if re.fullmatch(r'#([0-9A-Fa-f]{6})', v):
        return v
    raise ValueError('color')

async def _apply_pending(chat_id: int, text: str, update: Update) -> bool:
    action = pending_actions.get(chat_id)
    if not action:
        return False
    try:
        if action.get('type') == 'headers':
            if ':' in text and '|' in text:
                top, bottom = text.split(':', 1)[1].split('|', 1)
                top = top.strip()
                bottom = bottom.strip()
                if len(top) > 50 or len(bottom) > 50:
                    await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ (–º–∞–∫—Å 50). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return True
                update_user_settings(chat_id, {"headers": {"top": top, "bottom": bottom}})
                await update.message.reply_text("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                pending_actions.pop(chat_id, None)
                return True
            else:
                await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: '–∑–∞–≥–æ–ª–æ–≤–∫–∏: –í–ï–†–• | –ù–ò–ó'")
                return True
        if action.get('type') == 'cookies_text':
            # Normalize and save cookies text to both global and per-user paths
            normalized = normalize_cookies_text(text)
            global_path = Path(COOKIES_FILE)
            user_dir = USER_ASSETS_DIR / str(chat_id)
            user_dir.mkdir(parents=True, exist_ok=True)
            user_path = user_dir / 'cookies.txt'
            with open(global_path, 'w', encoding='utf-8') as f:
                f.write(normalized)
            with open(user_path, 'w', encoding='utf-8') as f:
                f.write(normalized)
            await update.message.reply_text(f"‚úÖ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n–ì–ª–æ–±–∞–ª—å–Ω–æ: {global_path}\n–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_path}")
            pending_actions.pop(chat_id, None)
            return True
        path = action['path']
        t = action.get('type')
        if t == 'str':
            # –±–µ—Ä—ë–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ ':' –µ—Å–ª–∏ –µ—Å—Ç—å
            val = text.split(':', 1)[-1].strip()
            if action.get('maxlen') and len(val) > action['maxlen']:
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                return True
            _patch = {}
            d = _patch
            keys = path.split('.')
            for k in keys[:-1]:
                d.setdefault(k, {})
                d = d[k]
            d[keys[-1]] = val
            update_user_settings(chat_id, _patch)
            await update.message.reply_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            pending_actions.pop(chat_id, None)
            return True
        if t == 'int':
            val_str = re.findall(r'(-?\d+)', text)
            if not val_str:
                raise ValueError('int')
            val = int(val_str[0])
            if ('min' in action and val < action['min']) or ('max' in action and val > action['max']):
                await update.message.reply_text("‚ùå –í–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
                return True
            _patch = {}; d = _patch; keys = path.split('.')
            for k in keys[:-1]: d.setdefault(k, {}); d = d[k]
            d[keys[-1]] = val
            update_user_settings(chat_id, _patch)
            await update.message.reply_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            pending_actions.pop(chat_id, None)
            return True
        if t == 'float':
            m = re.search(r'(-?\d+(?:[\.,]\d+)?)', text)
            if not m:
                raise ValueError('float')
            val = float(m.group(1).replace(',', '.'))
            if ('minf' in action and val < action['minf']) or ('maxf' in action and val > action['maxf']):
                await update.message.reply_text("‚ùå –í–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
                return True
            _patch = {}; d = _patch; keys = path.split('.')
            for k in keys[:-1]: d.setdefault(k, {}); d = d[k]
            d[keys[-1]] = val
            update_user_settings(chat_id, _patch)
            await update.message.reply_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            pending_actions.pop(chat_id, None)
            return True
        if t == 'color':
            color_match = re.search(r'#([0-9A-Fa-f]{6})', text)
            if not color_match:
                raise ValueError('color')
            color = f"#{color_match.group(1)}"
            _patch = {}; d = _patch; keys = path.split('.')
            for k in keys[:-1]: d.setdefault(k, {}); d = d[k]
            d[keys[-1]] = color
            update_user_settings(chat_id, _patch)
            await update.message.reply_text("‚úÖ –¶–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            pending_actions.pop(chat_id, None)
            return True
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return True
    return False

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    action = pending_actions.get(chat_id)
    if not action:
        await update.message.reply_text("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ /settings, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, –∫—É–¥–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª.")
        return
    try:
        if update.message.document is None:
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return
        file = await context.bot.get_file(update.message.document.file_id)
        filename = update.message.document.file_name or 'file'
        suffix = ''.join(Path(filename).suffixes)
        # Cookies upload (global + per-user)
        if action.get('type') == 'cookies_file':
            # Download to memory then normalize
            tmp_path = USER_ASSETS_DIR / str(chat_id) / ('tmp_' + filename)
            tmp_path.parent.mkdir(parents=True, exist_ok=True)
            await file.download_to_drive(custom_path=str(tmp_path))
            raw = ''
            try:
                raw = tmp_path.read_text(encoding='utf-8', errors='ignore')
            except Exception:
                raw = tmp_path.read_text(errors='ignore')
            normalized = normalize_cookies_text(raw)
            # Save global
            dest = Path(COOKIES_FILE)
            dest.parent.mkdir(exist_ok=True)
            dest.write_text(normalized, encoding='utf-8')
            # Save per-user
            user_dir = USER_ASSETS_DIR / str(chat_id)
            user_dir.mkdir(parents=True, exist_ok=True)
            user_path = user_dir / 'cookies.txt'
            user_path.write_text(normalized, encoding='utf-8')
            try:
                tmp_path.unlink(missing_ok=True)
            except Exception:
                pass
            pending_actions.pop(chat_id, None)
            await update.message.reply_text(f"‚úÖ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n–ì–ª–æ–±–∞–ª—å–Ω–æ: {dest}\n–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_path}")
            return
        # Setting file upload
        if action.get('type') == 'file_setting':
            accept = action.get('accept')
            if accept and suffix.lower() not in accept:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.")
                return
            save_dir = USER_ASSETS_DIR / str(chat_id)
            save_dir.mkdir(parents=True, exist_ok=True)
            dest = save_dir / filename
            await file.download_to_drive(custom_path=str(dest))
            # Patch settings
            path = action['path']
            _patch = {}; d = _patch; keys = path.split('.')
            for k in keys[:-1]: d.setdefault(k, {}); d = d[k]
            d[keys[-1]] = str(dest)
            update_user_settings(chat_id, _patch)
            pending_actions.pop(chat_id, None)
            await update.message.reply_text(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω: {dest}")
            return
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –∑–¥–µ—Å—å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ======= –û–°–ù–û–í–ù–û–ô –§–õ–û–£ –û–ë–†–ê–ë–û–¢–ö–ò =======

async def handle_youtube_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ YouTube —Å—Å—ã–ª–æ–∫ - —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ"""
    url = update.message.text.strip()
    chat_id = update.effective_chat.id
    
    if not is_youtube_url(url):
        await update.message.reply_text(
            "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É."
        )
        return
    
    status_message = await update.message.reply_text(
        "üé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ..."
    )
    
    try:
        await status_message.edit_text(
            "üì• <b>–≠—Ç–∞–ø 1/5:</b> –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...",
            parse_mode=ParseMode.HTML
        )
        
        file_path = await downloader.download_video(url, chat_id)
        
        if not file_path:
            await status_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ."
            )
            return
        
        await status_message.edit_text(
            "üéûÔ∏è <b>–≠—Ç–∞–ø 2/5:</b> –ê–Ω–∞–ª–∏–∑ –∏ –Ω–∞—Ä–µ–∑–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏...",
            parse_mode=ParseMode.HTML
        )
        
        top_header, bottom_header = get_user_headers(chat_id)
        timeline = get_user_timeline(chat_id)
        
        await status_message.edit_text(
            "üé§ <b>–≠—Ç–∞–ø 3/5:</b> –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏...",
            parse_mode=ParseMode.HTML
        )

        settings = load_user_settings(chat_id)
        
        archive_path = await processor.process_video(file_path, chat_id, top_header, bottom_header, segment_duration=timeline, settings=settings)
        
        if not archive_path:
            await status_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
            )
            downloader.cleanup_file(file_path)
            return

        if archive_path.endswith('.txt'):
            await status_message.edit_text(
                "‚òÅÔ∏è <b>–≠—Ç–∞–ø 4/5:</b> –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Google Drive...",
                parse_mode=ParseMode.HTML
            )
            with open(archive_path, 'rb') as links_file:
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=links_file,
                    filename=f"uploaded_links_{chat_id}.txt",
                    caption="‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –∫–ª–∏–ø—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
                )
            processor.cleanup_temp_files(chat_id)
            await status_message.edit_text(
                "‚úÖ <b>–≠—Ç–∞–ø 5/5:</b> –ì–æ—Ç–æ–≤–æ!",
                parse_mode=ParseMode.HTML
            )
            await status_message.delete()
        elif archive_path.endswith('.zip'):
            await status_message.edit_text(
                "üì¶ <b>–≠—Ç–∞–ø 4/5:</b> –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞ –∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏—è...",
                parse_mode=ParseMode.HTML
            )

            await status_message.edit_text(
                f"üì§ <b>–≠—Ç–∞–ø 5/5:</b> –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞...",
                parse_mode=ParseMode.HTML
            )
            
            file_size = processor.get_file_size(archive_path)
            
            if file_size > MAX_FILE_SIZE:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è –ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size / (1024*1024):.1f} MB) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.\n\n" 
                         f"–û–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –ø—É—Ç–∏: {archive_path}"
                )
            else:
                with open(archive_path, 'rb') as archive_file:
                    caption = f"‚úÖ –ì–æ—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤ —Å –≤–∏–¥–µ–æ\n"
                    caption += f"üì¶ –í—Å–µ –≤–∏–¥–µ–æ –Ω–∞—Ä–µ–∑–∞–Ω—ã –Ω–∞ {timeline}-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –∫–ª–∏–ø—ã\n"
                    caption += "üöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!"
                    
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=archive_file,
                        filename=f"final_videos_{chat_id}.zip",
                        caption=caption
                    )
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                processor.cleanup_temp_files(chat_id)
            
            await status_message.delete() 
            
            final_message = f"üéâ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            final_message += f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            final_message += f"‚Ä¢ –°–æ–∑–¥–∞–Ω ZIP-–∞—Ä—Ö–∏–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –≤–∏–¥–µ–æ\n"
            final_message += f"‚Ä¢ –§–æ—Ä–º–∞—Ç: 9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π)\n"
            final_message += f"‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã: –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å–ª–æ–≤–∞–º\n\n"
            final_message += f"üöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö!"
            
            await context.bot.send_message(
                chat_id=chat_id,
                text=final_message,
                parse_mode=ParseMode.HTML
            )
        else: # It's a message from the google drive uploader
            await status_message.edit_text(
                "‚òÅÔ∏è <b>–≠—Ç–∞–ø 4/5:</b> –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Google Drive...",
                parse_mode=ParseMode.HTML
            )
            await context.bot.send_message(
                chat_id=chat_id,
                text=archive_path,
                parse_mode=ParseMode.HTML
            )
            processor.cleanup_temp_files(chat_id)
            await status_message.edit_text(
                "‚úÖ <b>–≠—Ç–∞–ø 5/5:</b> –ì–æ—Ç–æ–≤–æ!",
                parse_mode=ParseMode.HTML
            )
            await status_message.delete()

        downloader.cleanup_file(file_path)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        await status_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)[:100]}..."
        )
        
        try:
            if 'file_path' in locals():
                downloader.cleanup_file(file_path)
            processor.cleanup_temp_files(chat_id)
        except:
            pass

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.strip()
    chat_id = update.effective_chat.id

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    if await _apply_pending(chat_id, text, update):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if text.lower().startswith('–∑–∞–≥–æ–ª–æ–≤–∫–∏:'):
        await handle_headers_setting(update, context)
        return

    if text.lower().startswith('—Ç–∞–π–º–ª–∞–π–Ω:'):
        await handle_timeline_setting(update, context)
        return
    
    if is_youtube_url(text):
        await handle_youtube_url(update, context)
    else:
        await update.message.reply_text(
            "ü§î –Ø —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Å YouTube.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É—Ç–æ–≥–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
            "üí° <b>–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/settings ‚Äî –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            "/reset_headers ‚Äî —Å–±—Ä–æ—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
            parse_mode=ParseMode.HTML
        )

async def handle_headers_setting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    text = update.message.text.strip()
    chat_id = update.effective_chat.id
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if ':' in text and '|' in text:
            # –§–æ—Ä–º–∞—Ç: "–∑–∞–≥–æ–ª–æ–≤–∫–∏: –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç | –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç"
            parts = text.split(':', 1)
            if len(parts) == 2:
                headers_part = parts[1].strip()
                if '|' in headers_part:
                    top_header, bottom_header = headers_part.split('|', 1)
                    top_header = top_header.strip()
                    bottom_header = bottom_header.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    if len(top_header) > 50:
                        await update.message.reply_text(
                            "‚ùå –í–µ—Ä—Ö–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤."
                        )
                        return
                    
                    if len(bottom_header) > 50:
                        await update.message.reply_text(
                            "‚ùå –ù–∏–∂–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤."
                        )
                        return
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    update_user_settings(chat_id, {"headers": {"top": top_header, "bottom": bottom_header}})
                    
                    await update.message.reply_text(
                        f"‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                        f"üîù <b>–í–µ—Ä—Ö–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b>\n"
                        f"<code>{top_header}</code>\n\n"
                        f"üîª <b>–ù–∏–∂–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b>\n"
                        f"<code>{bottom_header}</code>\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–æ–≤—ã–µ —Ä–æ–ª–∏–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Å —ç—Ç–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏!",
                        parse_mode=ParseMode.HTML
                    )
                    return
                else:
                    await update.message.reply_text(
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                        "<code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç | –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç</code>\n\n"
                        "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                        "<code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: üé¨ –ú–û–ô –ö–ê–ù–ê–õ | üí´ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å!</code>",
                        parse_mode=ParseMode.HTML
                    )
                    return
            else:
                await update.message.reply_text(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                    "<code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç | –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç</code>",
                    parse_mode=ParseMode.HTML
                )
                return
        else:
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "<code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç | –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç</code>\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>–∑–∞–≥–æ–ª–æ–≤–∫–∏: üé¨ –ú–û–ô –ö–ê–ù–ê–õ | üí´ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å!</code>",
                parse_mode=ParseMode.HTML
            )
            return
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    sentinel_tokens = {'BOT_TOKEN'}
    # Stronger validation: empty/placeholder/invalid format
    import re
    def is_probably_valid_token(token: str) -> bool:
        return bool(token) and token not in sentinel_tokens and re.match(r'^\d+:[A-Za-z0-9_-]{30,}$', token or '') is not None
    if not is_probably_valid_token(BOT_TOKEN):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BOT_TOKEN!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ config.py")
        print("Windows PowerShell:  $env:BOT_TOKEN=123456789:AAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
        print("Windows CMD:         set BOT_TOKEN=123456789:AAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
        print("Linux/macOS:         export BOT_TOKEN=123456789:AAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
        # –ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–∏—à–ª–æ (–º–∞—Å–∫–∏—Ä—É–µ–º)
        masked = (BOT_TOKEN[:5] + "..." + BOT_TOKEN[-5:]) if BOT_TOKEN and len(BOT_TOKEN) > 12 else (BOT_TOKEN or "<empty>")
        print(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BOT_TOKEN: {masked}")
        return
    
    masked = BOT_TOKEN[:5] + "..." if len(BOT_TOKEN) > 8 else "***"
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω BOT_TOKEN: {masked}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("reset_headers", reset_headers_command))
    application.add_handler(CallbackQueryHandler(settings_callback, pattern=r'^CFG:'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ YouTube Video Processor Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏!")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    import sys
    import codecs
    if sys.stdout.encoding != 'utf-8':
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    if sys.stderr.encoding != 'utf-8':
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')
    main()